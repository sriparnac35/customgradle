apply plugin: 'com.android.application'

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'
    defaultConfig {
        applicationId "sriparna.hillhouse.com.multidextest"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java {
                exclude '**/Sample.java'
            }
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
}

repositories{
    jcenter {  
        url "http://jcenter.bintray.com/"
    }  	


}



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile 'com.google.android.gms:play-services:10.0.1'
    compile 'com.google.android.gms:play-services-plus:10.0.1'
    compile 'com.google.android.gms:play-services-auth:10.0.1'
    compile 'com.google.android.gms:play-services-base:10.0.1'
    compile 'com.google.android.gms:play-services-identity:10.0.1'
    compile 'com.google.firebase:firebase-appindexing:10.0.1'
    compile 'com.google.android.gms:play-services-analytics:10.0.1'
    compile 'com.google.android.gms:play-services-awareness:10.0.1'
    compile 'com.google.android.gms:play-services-cast:10.0.1'
    compile 'com.google.android.gms:play-services-gcm:10.0.1'
    compile 'com.google.android.gms:play-services-drive:10.0.1'
    compile 'com.google.android.gms:play-services-fitness:10.0.1'
    compile 'com.google.android.gms:play-services-location:10.0.1'
    compile 'com.google.android.gms:play-services-maps:10.0.1'
    compile 'com.google.android.gms:play-services-ads:10.0.1'
    compile 'com.google.android.gms:play-services-places:10.0.1'
    compile 'com.google.android.gms:play-services-vision:10.0.1'
    compile 'com.google.android.gms:play-services-nearby:10.0.1'
    compile 'com.google.android.gms:play-services-panorama:10.0.1'
    compile 'com.google.android.gms:play-services-games:10.0.1'
    compile 'com.google.android.gms:play-services-safetynet:10.0.1'
    compile 'com.google.android.gms:play-services-wallet:10.0.1'
    compile 'com.google.android.gms:play-services-wearable:10.0.1'
    testCompile 'junit:junit:4.12'
}


tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        println "assembledebug task added"
        task.doLast {
            println "assembleDebug task ended"
        }
        task.doFirst {
            println "assembleDebug task started"
            println projectDir.absolutePath
            File file = new File(projectDir,"dexfiles/")
            println file.exists()
            println file.isDirectory()
            println file.absolutePath
        }

    }

    if (task.name == 'packageDebug'){
        println "packateg task added"
        task.onlyIf {
            boolean shouldExecute = project.hasProperty("done")
            Task pkgTask = (com.android.build.gradle.tasks.PackageApplication)task;

            if (shouldExecute == true){
                if (pkgTask.dexedLibraries == null){
                    pkgTask.dexedLibraries = new HashSet<File>()
                    pkgTask.dexedLibraries.add(new File(projectDir,"dexfiles/classes.dex"))
                }
                else{
                    println pkgTask.dexedLibraries.size()
                    HashSet<File> newFiles = new HashSet<File>()
                    newFiles.addAll(pkgTask.dexedLibraries);
                    newFiles.add(new File(projectDir,"dexfiles/classes.dex"))
                    pkgTask.dexedLibraries = newFiles
                }

            }

           return shouldExecute
        }

        task.doLast {
            println "package task ended"
        }
        task.doFirst {
            println "package task started"
        }
    }

    if (task.name == 'validateSigningDebug'){
        println "validatesigningdebug task added"
        task.onlyIf {
            project.hasProperty("done")

        }
    }

    if (task.name == 'zipalignDebug'){
        println 'zipalignDebug task added'
        task.onlyIf{
            project.hasProperty("done")
        }
    }

    if (task.name == 'prepareDebugDependencies'){
        println "prepareDebugDependencies"
        task.onlyIf{
            !project.hasProperty("done")
        }
    }
}
